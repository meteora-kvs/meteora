// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `raft.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct AddressState {
    // message fields
    pub address_map: ::std::collections::HashMap<u64, super::common::NodeAddress>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddressState {
    fn default() -> &'a AddressState {
        <AddressState as ::protobuf::Message>::default_instance()
    }
}

impl AddressState {
    pub fn new() -> AddressState {
        ::std::default::Default::default()
    }

    // repeated .meteora.raft.AddressState.AddressMapEntry address_map = 1;


    pub fn get_address_map(&self) -> &::std::collections::HashMap<u64, super::common::NodeAddress> {
        &self.address_map
    }
    pub fn clear_address_map(&mut self) {
        self.address_map.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_map(&mut self, v: ::std::collections::HashMap<u64, super::common::NodeAddress>) {
        self.address_map = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_map(&mut self) -> &mut ::std::collections::HashMap<u64, super::common::NodeAddress> {
        &mut self.address_map
    }

    // Take field
    pub fn take_address_map(&mut self) -> ::std::collections::HashMap<u64, super::common::NodeAddress> {
        ::std::mem::replace(&mut self.address_map, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for AddressState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<super::common::NodeAddress>>(wire_type, is, &mut self.address_map)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<super::common::NodeAddress>>(1, &self.address_map);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<super::common::NodeAddress>>(1, &self.address_map, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddressState {
        AddressState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<super::common::NodeAddress>>(
                "address_map",
                |m: &AddressState| { &m.address_map },
                |m: &mut AddressState| { &mut m.address_map },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddressState>(
                "AddressState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddressState {
        static instance: ::protobuf::rt::LazyV2<AddressState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddressState::new)
    }
}

impl ::protobuf::Clear for AddressState {
    fn clear(&mut self) {
        self.address_map.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddressState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddressState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChangeReply {
    // message fields
    pub state: super::common::State,
    pub address_map: ::std::collections::HashMap<u64, super::common::NodeAddress>,
    pub leader_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChangeReply {
    fn default() -> &'a ChangeReply {
        <ChangeReply as ::protobuf::Message>::default_instance()
    }
}

impl ChangeReply {
    pub fn new() -> ChangeReply {
        ::std::default::Default::default()
    }

    // .meteora.common.State state = 1;


    pub fn get_state(&self) -> super::common::State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::common::State::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::common::State) {
        self.state = v;
    }

    // repeated .meteora.raft.ChangeReply.AddressMapEntry address_map = 2;


    pub fn get_address_map(&self) -> &::std::collections::HashMap<u64, super::common::NodeAddress> {
        &self.address_map
    }
    pub fn clear_address_map(&mut self) {
        self.address_map.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_map(&mut self, v: ::std::collections::HashMap<u64, super::common::NodeAddress>) {
        self.address_map = v;
    }

    // Mutable pointer to the field.
    pub fn mut_address_map(&mut self) -> &mut ::std::collections::HashMap<u64, super::common::NodeAddress> {
        &mut self.address_map
    }

    // Take field
    pub fn take_address_map(&mut self) -> ::std::collections::HashMap<u64, super::common::NodeAddress> {
        ::std::mem::replace(&mut self.address_map, ::std::collections::HashMap::new())
    }

    // uint64 leader_id = 3;


    pub fn get_leader_id(&self) -> u64 {
        self.leader_id
    }
    pub fn clear_leader_id(&mut self) {
        self.leader_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u64) {
        self.leader_id = v;
    }
}

impl ::protobuf::Message for ChangeReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<super::common::NodeAddress>>(wire_type, is, &mut self.address_map)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.leader_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::common::State::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<super::common::NodeAddress>>(2, &self.address_map);
        if self.leader_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.leader_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::common::State::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<super::common::NodeAddress>>(2, &self.address_map, os)?;
        if self.leader_id != 0 {
            os.write_uint64(3, self.leader_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChangeReply {
        ChangeReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::State>>(
                "state",
                |m: &ChangeReply| { &m.state },
                |m: &mut ChangeReply| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeUint64, ::protobuf::types::ProtobufTypeMessage<super::common::NodeAddress>>(
                "address_map",
                |m: &ChangeReply| { &m.address_map },
                |m: &mut ChangeReply| { &mut m.address_map },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "leader_id",
                |m: &ChangeReply| { &m.leader_id },
                |m: &mut ChangeReply| { &mut m.leader_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChangeReply>(
                "ChangeReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChangeReply {
        static instance: ::protobuf::rt::LazyV2<ChangeReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChangeReply::new)
    }
}

impl ::protobuf::Clear for ChangeReply {
    fn clear(&mut self) {
        self.state = super::common::State::UNKNOWN;
        self.address_map.clear();
        self.leader_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChangeReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChangeReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nraft.proto\x12\x0cmeteora.raft\x1a\reraftpb.proto\x1a\x0ccommon.prot\
    o\"\xb7\x01\n\x0cAddressState\x12K\n\x0baddress_map\x18\x01\x20\x03(\x0b\
    2*.meteora.raft.AddressState.AddressMapEntryR\naddressMap\x1aZ\n\x0fAddr\
    essMapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\x04R\x03key\x121\n\x05valu\
    e\x18\x02\x20\x01(\x0b2\x1b.meteora.common.NodeAddressR\x05value:\x028\
    \x01\"\xff\x01\n\x0bChangeReply\x12+\n\x05state\x18\x01\x20\x01(\x0e2\
    \x15.meteora.common.StateR\x05state\x12J\n\x0baddress_map\x18\x02\x20\
    \x03(\x0b2).meteora.raft.ChangeReply.AddressMapEntryR\naddressMap\x12\
    \x1b\n\tleader_id\x18\x03\x20\x01(\x04R\x08leaderId\x1aZ\n\x0fAddressMap\
    Entry\x12\x10\n\x03key\x18\x01\x20\x01(\x04R\x03key\x121\n\x05value\x18\
    \x02\x20\x01(\x0b2\x1b.meteora.common.NodeAddressR\x05value:\x028\x012\
    \xc7\x01\n\x0bRaftService\x12@\n\x0cChangeConfig\x12\x13.eraftpb.ConfCha\
    nge\x1a\x19.meteora.raft.ChangeReply\"\0\x123\n\x07SendMsg\x12\x10.eraft\
    pb.Message\x1a\x14.meteora.common.Null\"\0\x12A\n\x0bSendAddress\x12\x1a\
    .meteora.raft.AddressState\x1a\x14.meteora.common.Null\"\0J\xb7\x04\n\
    \x06\x12\x04\0\0\x15\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\
    \x12\x03\x02\x07\x16\n\t\n\x02\x03\x01\x12\x03\x03\x07\x15\n\x08\n\x01\
    \x02\x12\x03\x05\x08\x14\n\n\n\x02\x06\0\x12\x04\x07\0\x0b\x01\n\n\n\x03\
    \x06\0\x01\x12\x03\x07\x08\x13\n\x0b\n\x04\x06\0\x02\0\x12\x03\x08\x04@\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x08\x08\x14\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x08\x15'\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x081<\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03\t\x04@\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\
    \t\x08\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\t\x10\x1f\n\x0c\n\x05\
    \x06\0\x02\x01\x03\x12\x03\t)<\n\x0b\n\x04\x06\0\x02\x02\x12\x03\n\x04A\
    \n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\n\x08\x13\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03\n\x14\x20\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\n*=\n\n\
    \n\x02\x04\0\x12\x04\r\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\r\x08\x14\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x04<\n\r\n\x05\x04\0\x02\0\x04\x12\
    \x04\x0e\x04\r\x16\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0e\x04+\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x0e,7\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0e:;\n\n\n\x02\x04\x01\x12\x04\x11\0\x15\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\x11\x08\x13\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x12\x04#\n\r\n\x05\
    \x04\x01\x02\0\x04\x12\x04\x12\x04\x11\x15\n\x0c\n\x05\x04\x01\x02\0\x06\
    \x12\x03\x12\x04\x18\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x12\x19\x1e\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x12!\"\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x13\x04<\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x13\x04\x12#\n\
    \x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x13\x04+\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\x13,7\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x13:;\n\
    \x0b\n\x04\x04\x01\x02\x02\x12\x03\x14\x04\x19\n\r\n\x05\x04\x01\x02\x02\
    \x04\x12\x04\x14\x04\x13<\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x14\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x14\x0b\x14\n\x0c\n\x05\
    \x04\x01\x02\x02\x03\x12\x03\x14\x17\x18b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
