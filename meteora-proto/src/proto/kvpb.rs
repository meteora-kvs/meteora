// This file is generated by rust-protobuf 2.22.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `kvpb.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_22_0;

#[derive(PartialEq,Clone,Default)]
pub struct GetReq {
    // message fields
    pub key: ::std::string::String,
    pub client_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetReq {
    fn default() -> &'a GetReq {
        <GetReq as ::protobuf::Message>::default_instance()
    }
}

impl GetReq {
    pub fn new() -> GetReq {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // uint64 client_id = 2;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }
}

impl ::protobuf::Message for GetReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if self.client_id != 0 {
            os.write_uint64(2, self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetReq {
        GetReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &GetReq| { &m.key },
                |m: &mut GetReq| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_id",
                |m: &GetReq| { &m.client_id },
                |m: &mut GetReq| { &mut m.client_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetReq>(
                "GetReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetReq {
        static instance: ::protobuf::rt::LazyV2<GetReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetReq::new)
    }
}

impl ::protobuf::Clear for GetReq {
    fn clear(&mut self) {
        self.key.clear();
        self.client_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetReply {
    // message fields
    pub state: super::commonpb::State,
    pub value: ::std::string::String,
    pub address_map: ::std::vec::Vec<u8>,
    pub leader_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetReply {
    fn default() -> &'a GetReply {
        <GetReply as ::protobuf::Message>::default_instance()
    }
}

impl GetReply {
    pub fn new() -> GetReply {
        ::std::default::Default::default()
    }

    // .meteora.common.State state = 1;


    pub fn get_state(&self) -> super::commonpb::State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::commonpb::State::OK;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::commonpb::State) {
        self.state = v;
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // bytes address_map = 3;


    pub fn get_address_map(&self) -> &[u8] {
        &self.address_map
    }
    pub fn clear_address_map(&mut self) {
        self.address_map.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_map(&mut self, v: ::std::vec::Vec<u8>) {
        self.address_map = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_map(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address_map
    }

    // Take field
    pub fn take_address_map(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address_map, ::std::vec::Vec::new())
    }

    // uint64 leader_id = 4;


    pub fn get_leader_id(&self) -> u64 {
        self.leader_id
    }
    pub fn clear_leader_id(&mut self) {
        self.leader_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u64) {
        self.leader_id = v;
    }
}

impl ::protobuf::Message for GetReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address_map)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.leader_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::commonpb::State::OK {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        if !self.address_map.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.address_map);
        }
        if self.leader_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.leader_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::commonpb::State::OK {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        if !self.address_map.is_empty() {
            os.write_bytes(3, &self.address_map)?;
        }
        if self.leader_id != 0 {
            os.write_uint64(4, self.leader_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetReply {
        GetReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::commonpb::State>>(
                "state",
                |m: &GetReply| { &m.state },
                |m: &mut GetReply| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &GetReply| { &m.value },
                |m: &mut GetReply| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address_map",
                |m: &GetReply| { &m.address_map },
                |m: &mut GetReply| { &mut m.address_map },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "leader_id",
                |m: &GetReply| { &m.leader_id },
                |m: &mut GetReply| { &mut m.leader_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetReply>(
                "GetReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetReply {
        static instance: ::protobuf::rt::LazyV2<GetReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetReply::new)
    }
}

impl ::protobuf::Clear for GetReply {
    fn clear(&mut self) {
        self.state = super::commonpb::State::OK;
        self.value.clear();
        self.address_map.clear();
        self.leader_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetReq {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    pub client_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetReq {
    fn default() -> &'a SetReq {
        <SetReq as ::protobuf::Message>::default_instance()
    }
}

impl SetReq {
    pub fn new() -> SetReq {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // uint64 client_id = 3;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }
}

impl ::protobuf::Message for SetReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        if self.client_id != 0 {
            os.write_uint64(3, self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetReq {
        SetReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &SetReq| { &m.key },
                |m: &mut SetReq| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &SetReq| { &m.value },
                |m: &mut SetReq| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_id",
                |m: &SetReq| { &m.client_id },
                |m: &mut SetReq| { &mut m.client_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetReq>(
                "SetReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetReq {
        static instance: ::protobuf::rt::LazyV2<SetReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetReq::new)
    }
}

impl ::protobuf::Clear for SetReq {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.client_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetReply {
    // message fields
    pub state: super::commonpb::State,
    pub address_map: ::std::vec::Vec<u8>,
    pub leader_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetReply {
    fn default() -> &'a SetReply {
        <SetReply as ::protobuf::Message>::default_instance()
    }
}

impl SetReply {
    pub fn new() -> SetReply {
        ::std::default::Default::default()
    }

    // .meteora.common.State state = 1;


    pub fn get_state(&self) -> super::commonpb::State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::commonpb::State::OK;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::commonpb::State) {
        self.state = v;
    }

    // bytes address_map = 2;


    pub fn get_address_map(&self) -> &[u8] {
        &self.address_map
    }
    pub fn clear_address_map(&mut self) {
        self.address_map.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_map(&mut self, v: ::std::vec::Vec<u8>) {
        self.address_map = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_map(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address_map
    }

    // Take field
    pub fn take_address_map(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address_map, ::std::vec::Vec::new())
    }

    // uint64 leader_id = 3;


    pub fn get_leader_id(&self) -> u64 {
        self.leader_id
    }
    pub fn clear_leader_id(&mut self) {
        self.leader_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u64) {
        self.leader_id = v;
    }
}

impl ::protobuf::Message for SetReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address_map)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.leader_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::commonpb::State::OK {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.address_map.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.address_map);
        }
        if self.leader_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.leader_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::commonpb::State::OK {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if !self.address_map.is_empty() {
            os.write_bytes(2, &self.address_map)?;
        }
        if self.leader_id != 0 {
            os.write_uint64(3, self.leader_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetReply {
        SetReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::commonpb::State>>(
                "state",
                |m: &SetReply| { &m.state },
                |m: &mut SetReply| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address_map",
                |m: &SetReply| { &m.address_map },
                |m: &mut SetReply| { &mut m.address_map },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "leader_id",
                |m: &SetReply| { &m.leader_id },
                |m: &mut SetReply| { &mut m.leader_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetReply>(
                "SetReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetReply {
        static instance: ::protobuf::rt::LazyV2<SetReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetReply::new)
    }
}

impl ::protobuf::Clear for SetReply {
    fn clear(&mut self) {
        self.state = super::commonpb::State::OK;
        self.address_map.clear();
        self.leader_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteReq {
    // message fields
    pub key: ::std::string::String,
    pub client_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteReq {
    fn default() -> &'a DeleteReq {
        <DeleteReq as ::protobuf::Message>::default_instance()
    }
}

impl DeleteReq {
    pub fn new() -> DeleteReq {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // uint64 client_id = 2;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }
}

impl ::protobuf::Message for DeleteReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if self.client_id != 0 {
            os.write_uint64(2, self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteReq {
        DeleteReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &DeleteReq| { &m.key },
                |m: &mut DeleteReq| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "client_id",
                |m: &DeleteReq| { &m.client_id },
                |m: &mut DeleteReq| { &mut m.client_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteReq>(
                "DeleteReq",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteReq {
        static instance: ::protobuf::rt::LazyV2<DeleteReq> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteReq::new)
    }
}

impl ::protobuf::Clear for DeleteReq {
    fn clear(&mut self) {
        self.key.clear();
        self.client_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteReq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteReply {
    // message fields
    pub state: super::commonpb::State,
    pub address_map: ::std::vec::Vec<u8>,
    pub leader_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteReply {
    fn default() -> &'a DeleteReply {
        <DeleteReply as ::protobuf::Message>::default_instance()
    }
}

impl DeleteReply {
    pub fn new() -> DeleteReply {
        ::std::default::Default::default()
    }

    // .meteora.common.State state = 1;


    pub fn get_state(&self) -> super::commonpb::State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = super::commonpb::State::OK;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::commonpb::State) {
        self.state = v;
    }

    // bytes address_map = 2;


    pub fn get_address_map(&self) -> &[u8] {
        &self.address_map
    }
    pub fn clear_address_map(&mut self) {
        self.address_map.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_map(&mut self, v: ::std::vec::Vec<u8>) {
        self.address_map = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_map(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.address_map
    }

    // Take field
    pub fn take_address_map(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.address_map, ::std::vec::Vec::new())
    }

    // uint64 leader_id = 3;


    pub fn get_leader_id(&self) -> u64 {
        self.leader_id
    }
    pub fn clear_leader_id(&mut self) {
        self.leader_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_id(&mut self, v: u64) {
        self.leader_id = v;
    }
}

impl ::protobuf::Message for DeleteReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.address_map)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.leader_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != super::commonpb::State::OK {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.address_map.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.address_map);
        }
        if self.leader_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.leader_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != super::commonpb::State::OK {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if !self.address_map.is_empty() {
            os.write_bytes(2, &self.address_map)?;
        }
        if self.leader_id != 0 {
            os.write_uint64(3, self.leader_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteReply {
        DeleteReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::commonpb::State>>(
                "state",
                |m: &DeleteReply| { &m.state },
                |m: &mut DeleteReply| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "address_map",
                |m: &DeleteReply| { &m.address_map },
                |m: &mut DeleteReply| { &mut m.address_map },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "leader_id",
                |m: &DeleteReply| { &m.leader_id },
                |m: &mut DeleteReply| { &mut m.leader_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteReply>(
                "DeleteReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteReply {
        static instance: ::protobuf::rt::LazyV2<DeleteReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteReply::new)
    }
}

impl ::protobuf::Clear for DeleteReply {
    fn clear(&mut self) {
        self.state = super::commonpb::State::OK;
        self.address_map.clear();
        self.leader_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nkvpb.proto\x12\nmeteora.kv\x1a\x0ecommonpb.proto\"7\n\x06GetReq\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x1b\n\tclient_id\x18\x02\
    \x20\x01(\x04R\x08clientId\"\x8b\x01\n\x08GetReply\x12+\n\x05state\x18\
    \x01\x20\x01(\x0e2\x15.meteora.common.StateR\x05state\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value\x12\x1f\n\x0baddress_map\x18\x03\x20\x01(\
    \x0cR\naddressMap\x12\x1b\n\tleader_id\x18\x04\x20\x01(\x04R\x08leaderId\
    \"M\n\x06SetReq\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value\x12\x1b\n\tclient_id\x18\x03\x20\
    \x01(\x04R\x08clientId\"u\n\x08SetReply\x12+\n\x05state\x18\x01\x20\x01(\
    \x0e2\x15.meteora.common.StateR\x05state\x12\x1f\n\x0baddress_map\x18\
    \x02\x20\x01(\x0cR\naddressMap\x12\x1b\n\tleader_id\x18\x03\x20\x01(\x04\
    R\x08leaderId\":\n\tDeleteReq\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03ke\
    y\x12\x1b\n\tclient_id\x18\x02\x20\x01(\x04R\x08clientId\"x\n\x0bDeleteR\
    eply\x12+\n\x05state\x18\x01\x20\x01(\x0e2\x15.meteora.common.StateR\x05\
    state\x12\x1f\n\x0baddress_map\x18\x02\x20\x01(\x0cR\naddressMap\x12\x1b\
    \n\tleader_id\x18\x03\x20\x01(\x04R\x08leaderId2\xad\x01\n\tKvService\
    \x121\n\x03Get\x12\x12.meteora.kv.GetReq\x1a\x14.meteora.kv.GetReply\"\0\
    \x121\n\x03Set\x12\x12.meteora.kv.SetReq\x1a\x14.meteora.kv.SetReply\"\0\
    \x12:\n\x06Delete\x12\x15.meteora.kv.DeleteReq\x1a\x17.meteora.kv.Delete\
    Reply\"\0J\x9a\x0c\n\x06\x12\x04\0\0-\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\t\n\x02\x03\0\x12\x03\x02\x07\x17\n\x08\n\x01\x02\x12\x03\x04\x08\
    \x12\n\n\n\x02\x06\0\x12\x04\x06\0\n\x01\n\n\n\x03\x06\0\x01\x12\x03\x06\
    \x08\x11\n\x0b\n\x04\x06\0\x02\0\x12\x03\x07\x04)\n\x0c\n\x05\x06\0\x02\
    \0\x01\x12\x03\x07\x08\x0b\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\x0c\
    \x12\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x07\x1d%\n\x0b\n\x04\x06\0\x02\
    \x01\x12\x03\x08\x04)\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x08\x08\x0b\
    \n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\x0c\x12\n\x0c\n\x05\x06\0\x02\
    \x01\x03\x12\x03\x08\x1d%\n\x0b\n\x04\x06\0\x02\x02\x12\x03\t\x042\n\x0c\
    \n\x05\x06\0\x02\x02\x01\x12\x03\t\x08\x0e\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03\t\x0f\x18\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\t#.\n\n\n\x02\
    \x04\0\x12\x04\x0c\0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x0e\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\r\x04\x13\n\r\n\x05\x04\0\x02\0\x04\x12\
    \x04\r\x04\x0c\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\r\x04\n\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\r\x0b\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\r\x11\x12\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0e\x04\x19\n\r\n\x05\
    \x04\0\x02\x01\x04\x12\x04\x0e\x04\r\x13\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x0e\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\x0b\x14\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0e\x17\x18\n\n\n\x02\x04\x01\x12\
    \x04\x11\0\x16\x01\n\n\n\x03\x04\x01\x01\x12\x03\x11\x08\x10\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x12\x04#\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x12\
    \x04\x11\x12\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x12\x04\x18\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x12\x19\x1e\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x12!\"\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x13\x04\x15\n\r\n\
    \x05\x04\x01\x02\x01\x04\x12\x04\x13\x04\x12#\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x13\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x13\
    \x0b\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x13\x13\x14\n\x0b\n\x04\
    \x04\x01\x02\x02\x12\x03\x14\x04\x1a\n\r\n\x05\x04\x01\x02\x02\x04\x12\
    \x04\x14\x04\x13\x15\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x14\x04\t\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x14\n\x15\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03\x14\x18\x19\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x15\x04\
    \x19\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x15\x04\x14\x1a\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03\x15\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03\x15\x0b\x14\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x15\x17\x18\
    \n\n\n\x02\x04\x02\x12\x04\x18\0\x1c\x01\n\n\n\x03\x04\x02\x01\x12\x03\
    \x18\x08\x0e\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x19\x04\x13\n\r\n\x05\x04\
    \x02\x02\0\x04\x12\x04\x19\x04\x18\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03\x19\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x19\x0b\x0e\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x19\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03\x1a\x04\x15\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x1a\x04\x19\
    \x13\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x1a\x04\n\n\x0c\n\x05\x04\
    \x02\x02\x01\x01\x12\x03\x1a\x0b\x10\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\
    \x03\x1a\x13\x14\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1b\x04\x19\n\r\n\
    \x05\x04\x02\x02\x02\x04\x12\x04\x1b\x04\x1a\x15\n\x0c\n\x05\x04\x02\x02\
    \x02\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1b\
    \x0b\x14\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x1b\x17\x18\n\n\n\x02\
    \x04\x03\x12\x04\x1e\0\"\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1e\x08\x10\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03\x1f\x04#\n\r\n\x05\x04\x03\x02\0\x04\
    \x12\x04\x1f\x04\x1e\x12\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1f\x04\
    \x18\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1f\x19\x1e\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03\x1f!\"\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x20\
    \x04\x1a\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x20\x04\x1f#\n\x0c\n\x05\
    \x04\x03\x02\x01\x05\x12\x03\x20\x04\t\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03\x20\n\x15\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x20\x18\x19\n\
    \x0b\n\x04\x04\x03\x02\x02\x12\x03!\x04\x19\n\r\n\x05\x04\x03\x02\x02\
    \x04\x12\x04!\x04\x20\x1a\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03!\x04\n\
    \n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03!\x0b\x14\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03!\x17\x18\n\n\n\x02\x04\x04\x12\x04$\0'\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03$\x08\x11\n\x0b\n\x04\x04\x04\x02\0\x12\x03%\x04\
    \x13\n\r\n\x05\x04\x04\x02\0\x04\x12\x04%\x04$\x13\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03%\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03%\x0b\x0e\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03%\x11\x12\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03&\x04\x19\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04&\x04%\x13\n\
    \x0c\n\x05\x04\x04\x02\x01\x05\x12\x03&\x04\n\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03&\x0b\x14\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03&\x17\
    \x18\n\n\n\x02\x04\x05\x12\x04)\0-\x01\n\n\n\x03\x04\x05\x01\x12\x03)\
    \x08\x13\n\x0b\n\x04\x04\x05\x02\0\x12\x03*\x04#\n\r\n\x05\x04\x05\x02\0\
    \x04\x12\x04*\x04)\x15\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03*\x04\x18\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03*\x19\x1e\n\x0c\n\x05\x04\x05\x02\0\
    \x03\x12\x03*!\"\n\x0b\n\x04\x04\x05\x02\x01\x12\x03+\x04\x1a\n\r\n\x05\
    \x04\x05\x02\x01\x04\x12\x04+\x04*#\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\
    \x03+\x04\t\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03+\n\x15\n\x0c\n\x05\
    \x04\x05\x02\x01\x03\x12\x03+\x18\x19\n\x0b\n\x04\x04\x05\x02\x02\x12\
    \x03,\x04\x19\n\r\n\x05\x04\x05\x02\x02\x04\x12\x04,\x04+\x1a\n\x0c\n\
    \x05\x04\x05\x02\x02\x05\x12\x03,\x04\n\n\x0c\n\x05\x04\x05\x02\x02\x01\
    \x12\x03,\x0b\x14\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03,\x17\x18b\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
